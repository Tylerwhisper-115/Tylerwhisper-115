class Profile():
    """Class representing a user's profile."""
    def __init__(self, username, password, screen_name, email):
        self.username = username
        self.password = password
        self.screen_name = screen_name
        self.email = email


    def __str__(self):
        """ Return a string representation of the Profile."""
        return f"Profile - Username: {self.username}, Screen Name: {self.screen_name}, Email: {self.email}"

    def modify_profile(self, password = None, screen_name=None, email=None):
        self.password = password
        self.screen_name = screen_name
        self.email = email


class Activity(Profile):
    """Base class representing an activity."""
    def __init__(self, user, content):
        self.user = user
        self.content = content
        

    def __str__(self):
        """ Return a string representation of the Activity."""
        return f"Activity - User: {self.user.profile.username}, Content: {self.content}"


class Post(Activity):
    """Class representing a user's post."""
    def __init__(self, user, content): 
        """ Initialize a Post instance. """
        super().__init__(user, content)

    def __str__(self):
        """ Return a string representation of the Post. """
        return f"Post - {super().__str__()}"
    

class Message(Activity):
    """Class representing a user's message to another user."""
    def __init__(self,receiver,content, user):
        super().__init__(user ,content)
        self.receiver = receiver

    def __str__(self):
        """ Return a string representation of the Message."""
        return f"Message - {super().__str__()}, Receiver: {self.receiver.profile.username}"


class User():
    """Class representing a user in the social network."""
    def __init__(self, username, password, screen_name, email):
        #super().__init__(username, password, screen_name, email)
        self.username = username
        self.password = password
        self.screen_name = screen_name
        self.email = email
        self.profile = Profile(self.username, self.password, self.screen_name,self.email) 
        self.posts = []
        self.messages = []

    def create_post(self, content):
        self.content = content
        
        if (len(self.content))==0:
            raise ValueError("")
        else:
            self.posts.append(Post(self.username, self.content))
            return self.content
        


    def send_message(self, receiver, content):
        """Send a message from the user to the specified receiver.

        Args:
            receiver (User): The user receiving the message.
            content (str): The content of the message.

        Returns:
            Message: The created message.

        Raises:
            ValueError: If the receiver ID or message content is empty.
        """
        self.receiver =receiver
        self.content = content
        self.message = Message(self.receiver, self.content, self.username)
        if  len(self.content) == 0:
            raise ValueError("")
        else:
            return self.message



    def __str__(self):
        """ Return a string representation of the User."""
        return f"User - {self.profile}"

# Example usage:
if __name__ == "__main__":
    user1 = User("user1", "password1", "User One", "user1@example.com")
    user2 = User("user2", "password2", "User Two", "user2@example.com")

    post1 = user1.create_post("This is my first post")
    message1 = user2.send_message(user1, "Hi User One! How are you?")
    print(post1)
    print(message1)
    user1.profile.modify_profile(email="User1_1@uconn.edu")
    print(user1)
    print(user2)

